/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AuthUsersIndexImport } from './routes/_auth/users/index'
import { Route as AuthRunsIndexImport } from './routes/_auth/runs/index'
import { Route as AuthNamespacesIndexImport } from './routes/_auth/namespaces/index'
import { Route as AuthDatasetsIndexImport } from './routes/_auth/datasets/index'
import { Route as AuthUsersUserIdImport } from './routes/_auth/users/$userId'
import { Route as AuthRunsRunIdImport } from './routes/_auth/runs/$runId'
import { Route as AuthNamespacesNamespaceIdImport } from './routes/_auth/namespaces/$namespaceId'
import { Route as AuthDatasetsDatasetIdImport } from './routes/_auth/datasets/$datasetId'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthUsersIndexRoute = AuthUsersIndexImport.update({
  id: '/_auth/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRunsIndexRoute = AuthRunsIndexImport.update({
  id: '/_auth/runs/',
  path: '/runs/',
  getParentRoute: () => rootRoute,
} as any)

const AuthNamespacesIndexRoute = AuthNamespacesIndexImport.update({
  id: '/_auth/namespaces/',
  path: '/namespaces/',
  getParentRoute: () => rootRoute,
} as any)

const AuthDatasetsIndexRoute = AuthDatasetsIndexImport.update({
  id: '/_auth/datasets/',
  path: '/datasets/',
  getParentRoute: () => rootRoute,
} as any)

const AuthUsersUserIdRoute = AuthUsersUserIdImport.update({
  id: '/_auth/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const AuthRunsRunIdRoute = AuthRunsRunIdImport.update({
  id: '/_auth/runs/$runId',
  path: '/runs/$runId',
  getParentRoute: () => rootRoute,
} as any)

const AuthNamespacesNamespaceIdRoute = AuthNamespacesNamespaceIdImport.update({
  id: '/_auth/namespaces/$namespaceId',
  path: '/namespaces/$namespaceId',
  getParentRoute: () => rootRoute,
} as any)

const AuthDatasetsDatasetIdRoute = AuthDatasetsDatasetIdImport.update({
  id: '/_auth/datasets/$datasetId',
  path: '/datasets/$datasetId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/_auth/datasets/$datasetId': {
      id: '/_auth/datasets/$datasetId'
      path: '/datasets/$datasetId'
      fullPath: '/datasets/$datasetId'
      preLoaderRoute: typeof AuthDatasetsDatasetIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/namespaces/$namespaceId': {
      id: '/_auth/namespaces/$namespaceId'
      path: '/namespaces/$namespaceId'
      fullPath: '/namespaces/$namespaceId'
      preLoaderRoute: typeof AuthNamespacesNamespaceIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/runs/$runId': {
      id: '/_auth/runs/$runId'
      path: '/runs/$runId'
      fullPath: '/runs/$runId'
      preLoaderRoute: typeof AuthRunsRunIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/users/$userId': {
      id: '/_auth/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthUsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/datasets/': {
      id: '/_auth/datasets/'
      path: '/datasets'
      fullPath: '/datasets'
      preLoaderRoute: typeof AuthDatasetsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/namespaces/': {
      id: '/_auth/namespaces/'
      path: '/namespaces'
      fullPath: '/namespaces'
      preLoaderRoute: typeof AuthNamespacesIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/runs/': {
      id: '/_auth/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof AuthRunsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/users/': {
      id: '/_auth/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/datasets/$datasetId': typeof AuthDatasetsDatasetIdRoute
  '/namespaces/$namespaceId': typeof AuthNamespacesNamespaceIdRoute
  '/runs/$runId': typeof AuthRunsRunIdRoute
  '/users/$userId': typeof AuthUsersUserIdRoute
  '/datasets': typeof AuthDatasetsIndexRoute
  '/namespaces': typeof AuthNamespacesIndexRoute
  '/runs': typeof AuthRunsIndexRoute
  '/users': typeof AuthUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/datasets/$datasetId': typeof AuthDatasetsDatasetIdRoute
  '/namespaces/$namespaceId': typeof AuthNamespacesNamespaceIdRoute
  '/runs/$runId': typeof AuthRunsRunIdRoute
  '/users/$userId': typeof AuthUsersUserIdRoute
  '/datasets': typeof AuthDatasetsIndexRoute
  '/namespaces': typeof AuthNamespacesIndexRoute
  '/runs': typeof AuthRunsIndexRoute
  '/users': typeof AuthUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/_auth/datasets/$datasetId': typeof AuthDatasetsDatasetIdRoute
  '/_auth/namespaces/$namespaceId': typeof AuthNamespacesNamespaceIdRoute
  '/_auth/runs/$runId': typeof AuthRunsRunIdRoute
  '/_auth/users/$userId': typeof AuthUsersUserIdRoute
  '/_auth/datasets/': typeof AuthDatasetsIndexRoute
  '/_auth/namespaces/': typeof AuthNamespacesIndexRoute
  '/_auth/runs/': typeof AuthRunsIndexRoute
  '/_auth/users/': typeof AuthUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/logout'
    | '/datasets/$datasetId'
    | '/namespaces/$namespaceId'
    | '/runs/$runId'
    | '/users/$userId'
    | '/datasets'
    | '/namespaces'
    | '/runs'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/logout'
    | '/datasets/$datasetId'
    | '/namespaces/$namespaceId'
    | '/runs/$runId'
    | '/users/$userId'
    | '/datasets'
    | '/namespaces'
    | '/runs'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/logout'
    | '/_auth/datasets/$datasetId'
    | '/_auth/namespaces/$namespaceId'
    | '/_auth/runs/$runId'
    | '/_auth/users/$userId'
    | '/_auth/datasets/'
    | '/_auth/namespaces/'
    | '/_auth/runs/'
    | '/_auth/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  AuthDatasetsDatasetIdRoute: typeof AuthDatasetsDatasetIdRoute
  AuthNamespacesNamespaceIdRoute: typeof AuthNamespacesNamespaceIdRoute
  AuthRunsRunIdRoute: typeof AuthRunsRunIdRoute
  AuthUsersUserIdRoute: typeof AuthUsersUserIdRoute
  AuthDatasetsIndexRoute: typeof AuthDatasetsIndexRoute
  AuthNamespacesIndexRoute: typeof AuthNamespacesIndexRoute
  AuthRunsIndexRoute: typeof AuthRunsIndexRoute
  AuthUsersIndexRoute: typeof AuthUsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  AuthDatasetsDatasetIdRoute: AuthDatasetsDatasetIdRoute,
  AuthNamespacesNamespaceIdRoute: AuthNamespacesNamespaceIdRoute,
  AuthRunsRunIdRoute: AuthRunsRunIdRoute,
  AuthUsersUserIdRoute: AuthUsersUserIdRoute,
  AuthDatasetsIndexRoute: AuthDatasetsIndexRoute,
  AuthNamespacesIndexRoute: AuthNamespacesIndexRoute,
  AuthRunsIndexRoute: AuthRunsIndexRoute,
  AuthUsersIndexRoute: AuthUsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/logout",
        "/_auth/datasets/$datasetId",
        "/_auth/namespaces/$namespaceId",
        "/_auth/runs/$runId",
        "/_auth/users/$userId",
        "/_auth/datasets/",
        "/_auth/namespaces/",
        "/_auth/runs/",
        "/_auth/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/_auth/datasets/$datasetId": {
      "filePath": "_auth/datasets/$datasetId.tsx"
    },
    "/_auth/namespaces/$namespaceId": {
      "filePath": "_auth/namespaces/$namespaceId.tsx"
    },
    "/_auth/runs/$runId": {
      "filePath": "_auth/runs/$runId.tsx"
    },
    "/_auth/users/$userId": {
      "filePath": "_auth/users/$userId.tsx"
    },
    "/_auth/datasets/": {
      "filePath": "_auth/datasets/index.tsx"
    },
    "/_auth/namespaces/": {
      "filePath": "_auth/namespaces/index.tsx"
    },
    "/_auth/runs/": {
      "filePath": "_auth/runs/index.tsx"
    },
    "/_auth/users/": {
      "filePath": "_auth/users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
