/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as RunsIndexImport } from './routes/runs/index'
import { Route as NamespacesIndexImport } from './routes/namespaces/index'
import { Route as DatasetsIndexImport } from './routes/datasets/index'
import { Route as RunsRunIdImport } from './routes/runs/$runId'
import { Route as NamespacesNamespaceIdImport } from './routes/namespaces/$namespaceId'
import { Route as DatasetsDatasetIdImport } from './routes/datasets/$datasetId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RunsIndexRoute = RunsIndexImport.update({
  id: '/runs/',
  path: '/runs/',
  getParentRoute: () => rootRoute,
} as any)

const NamespacesIndexRoute = NamespacesIndexImport.update({
  id: '/namespaces/',
  path: '/namespaces/',
  getParentRoute: () => rootRoute,
} as any)

const DatasetsIndexRoute = DatasetsIndexImport.update({
  id: '/datasets/',
  path: '/datasets/',
  getParentRoute: () => rootRoute,
} as any)

const RunsRunIdRoute = RunsRunIdImport.update({
  id: '/runs/$runId',
  path: '/runs/$runId',
  getParentRoute: () => rootRoute,
} as any)

const NamespacesNamespaceIdRoute = NamespacesNamespaceIdImport.update({
  id: '/namespaces/$namespaceId',
  path: '/namespaces/$namespaceId',
  getParentRoute: () => rootRoute,
} as any)

const DatasetsDatasetIdRoute = DatasetsDatasetIdImport.update({
  id: '/datasets/$datasetId',
  path: '/datasets/$datasetId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/datasets/$datasetId': {
      id: '/datasets/$datasetId'
      path: '/datasets/$datasetId'
      fullPath: '/datasets/$datasetId'
      preLoaderRoute: typeof DatasetsDatasetIdImport
      parentRoute: typeof rootRoute
    }
    '/namespaces/$namespaceId': {
      id: '/namespaces/$namespaceId'
      path: '/namespaces/$namespaceId'
      fullPath: '/namespaces/$namespaceId'
      preLoaderRoute: typeof NamespacesNamespaceIdImport
      parentRoute: typeof rootRoute
    }
    '/runs/$runId': {
      id: '/runs/$runId'
      path: '/runs/$runId'
      fullPath: '/runs/$runId'
      preLoaderRoute: typeof RunsRunIdImport
      parentRoute: typeof rootRoute
    }
    '/datasets/': {
      id: '/datasets/'
      path: '/datasets'
      fullPath: '/datasets'
      preLoaderRoute: typeof DatasetsIndexImport
      parentRoute: typeof rootRoute
    }
    '/namespaces/': {
      id: '/namespaces/'
      path: '/namespaces'
      fullPath: '/namespaces'
      preLoaderRoute: typeof NamespacesIndexImport
      parentRoute: typeof rootRoute
    }
    '/runs/': {
      id: '/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/datasets/$datasetId': typeof DatasetsDatasetIdRoute
  '/namespaces/$namespaceId': typeof NamespacesNamespaceIdRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/datasets': typeof DatasetsIndexRoute
  '/namespaces': typeof NamespacesIndexRoute
  '/runs': typeof RunsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/datasets/$datasetId': typeof DatasetsDatasetIdRoute
  '/namespaces/$namespaceId': typeof NamespacesNamespaceIdRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/datasets': typeof DatasetsIndexRoute
  '/namespaces': typeof NamespacesIndexRoute
  '/runs': typeof RunsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/datasets/$datasetId': typeof DatasetsDatasetIdRoute
  '/namespaces/$namespaceId': typeof NamespacesNamespaceIdRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/datasets/': typeof DatasetsIndexRoute
  '/namespaces/': typeof NamespacesIndexRoute
  '/runs/': typeof RunsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/datasets/$datasetId'
    | '/namespaces/$namespaceId'
    | '/runs/$runId'
    | '/datasets'
    | '/namespaces'
    | '/runs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/datasets/$datasetId'
    | '/namespaces/$namespaceId'
    | '/runs/$runId'
    | '/datasets'
    | '/namespaces'
    | '/runs'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/datasets/$datasetId'
    | '/namespaces/$namespaceId'
    | '/runs/$runId'
    | '/datasets/'
    | '/namespaces/'
    | '/runs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRoute
  DatasetsDatasetIdRoute: typeof DatasetsDatasetIdRoute
  NamespacesNamespaceIdRoute: typeof NamespacesNamespaceIdRoute
  RunsRunIdRoute: typeof RunsRunIdRoute
  DatasetsIndexRoute: typeof DatasetsIndexRoute
  NamespacesIndexRoute: typeof NamespacesIndexRoute
  RunsIndexRoute: typeof RunsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  DatasetsDatasetIdRoute: DatasetsDatasetIdRoute,
  NamespacesNamespaceIdRoute: NamespacesNamespaceIdRoute,
  RunsRunIdRoute: RunsRunIdRoute,
  DatasetsIndexRoute: DatasetsIndexRoute,
  NamespacesIndexRoute: NamespacesIndexRoute,
  RunsIndexRoute: RunsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/datasets/$datasetId",
        "/namespaces/$namespaceId",
        "/runs/$runId",
        "/datasets/",
        "/namespaces/",
        "/runs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/datasets/$datasetId": {
      "filePath": "datasets/$datasetId.tsx"
    },
    "/namespaces/$namespaceId": {
      "filePath": "namespaces/$namespaceId.tsx"
    },
    "/runs/$runId": {
      "filePath": "runs/$runId.tsx"
    },
    "/datasets/": {
      "filePath": "datasets/index.tsx"
    },
    "/namespaces/": {
      "filePath": "namespaces/index.tsx"
    },
    "/runs/": {
      "filePath": "runs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
